[manifest]
version = '1.0.0'
dump_lua = true
priority = 1

# Replaces the screen shake slider
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "local screenshake = create_slider({label = localize('b_set_screenshake'),w = 4, h = 0.4, ref_table = G.SETTINGS, ref_value = 'screenshake', min = 0, max = 100})"
position = "at"
payload = "local screenshake = create_slider({label = localize('b_set_screenshake'),w = 16, h = 0.4, ref_table = G.SETTINGS, ref_value = 'screenshake', min = 0, max = 10000})"
match_indent = true

# replace first local shake_amt with a capped ease_shake_amt
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "local shake_amt = (G.SETTINGS.reduced_motion and 0 or 1)*math.max(0,G.SETTINGS.screenshake-30)/100"
position = "at"
payload = """
-- capped easing factor (0..1) used only for float/rotation/cursor influence
local ease_shake_amt = (G.SETTINGS.reduced_motion and 0 or 1)
    * math.min(math.max(G.SETTINGS.screenshake - 30, 0), 100) / 100
"""
match_indent = true

# eased_cursor_pos.x -> use ease_shake_amt
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "G.ARGS.eased_cursor_pos.x = G.ARGS.eased_cursor_pos.x*(1-3*dt) + 3*dt*(shake_amt*G.CURSOR.T.x + (1-shake_amt)*G.ROOM.T.w/2)"
position = "at"
payload = """
G.ARGS.eased_cursor_pos.x = G.ARGS.eased_cursor_pos.x*(1-3*dt)
    + 3*dt*(ease_shake_amt*G.CURSOR.T.x + (1-ease_shake_amt)*G.ROOM.T.w/2)
"""
match_indent = true

# eased_cursor_pos.y -> use ease_shake_amt
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "G.ARGS.eased_cursor_pos.y = G.ARGS.eased_cursor_pos.y*(1-3*dt) + 3*dt*(shake_amt*G.CURSOR.T.y + (1-shake_amt)*G.ROOM.T.h/2)"
position = "at"
payload = """
G.ARGS.eased_cursor_pos.y = G.ARGS.eased_cursor_pos.y*(1-3*dt)
    + 3*dt*(ease_shake_amt*G.CURSOR.T.y + (1-ease_shake_amt)*G.ROOM.T.h/2)
"""
match_indent = true

# eased_cursor_pos.sx -> use ease_shake_amt
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "G.ARGS.eased_cursor_pos.sx = G.ARGS.eased_cursor_pos.sx*(1-3*dt) + 3*dt*(shake_amt*G.CONTROLLER.cursor_position.x + (1-shake_amt)*G.WINDOWTRANS.real_window_w/2)"
position = "at"
payload = """
G.ARGS.eased_cursor_pos.sx = G.ARGS.eased_cursor_pos.sx*(1-3*dt)
    + 3*dt*(ease_shake_amt*G.CONTROLLER.cursor_position.x + (1-ease_shake_amt)*G.WINDOWTRANS.real_window_w/2)
"""
match_indent = true

# eased_cursor_pos.sy -> use ease_shake_amt
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "G.ARGS.eased_cursor_pos.sy = G.ARGS.eased_cursor_pos.sy*(1-3*dt) + 3*dt*(shake_amt*G.CONTROLLER.cursor_position.y + (1-shake_amt)*G.WINDOWTRANS.real_window_h/2)"
position = "at"
payload = """
G.ARGS.eased_cursor_pos.sy = G.ARGS.eased_cursor_pos.sy*(1-3*dt)
    + 3*dt*(ease_shake_amt*G.CONTROLLER.cursor_position.y + (1-ease_shake_amt)*G.WINDOWTRANS.real_window_h/2)
"""
match_indent = true

# rotation: low-freq rotation scaled by ease_shake_amt; jiggle-driven rotation uses shake_amt
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "G.ROOM.T.r = (0.001*math.sin(0.3*G.TIMERS.REAL)+ 0.002*(G.ROOM.jiggle)*math.sin(39.913*G.TIMERS.REAL))*shake_amt"
position = "at"
payload = """
-- low-frequency rotation/tilt driven by capped ease_shake_amt; high-frequency jiggle uses shake_amt
G.ROOM.T.r = (0.001 * math.sin(0.3 * G.TIMERS.REAL)) * ease_shake_amt
    + (0.002 * (G.ROOM.jiggle) * math.sin(39.913 * G.TIMERS.REAL)) * shake_amt
"""
match_indent = true

# G.ROOM.T.x: low-freq float and cursor-term use ease_shake_amt; jiggle term uses shake_amt
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "G.ROOM.T.x = G.ROOM_ORIG.x + (shake_amt)*(0.015*math.sin(0.913*G.TIMERS.REAL)  + 0.01*(G.ROOM.jiggle*shake_amt)*math.sin(19.913*G.TIMERS.REAL) + (G.ARGS.eased_cursor_pos.x - 0.5*(G.ROOM.T.w + G.ROOM_ORIG.x))*0.01)"
position = "at"
payload = """
G.ROOM.T.x = G.ROOM_ORIG.x
    + (0.015 * math.sin(0.913 * G.TIMERS.REAL)) * ease_shake_amt
    + (0.01 * (G.ROOM.jiggle * shake_amt) * math.sin(19.913 * G.TIMERS.REAL)) * shake_amt
    + (ease_shake_amt) * (G.ARGS.eased_cursor_pos.x - 0.5*(G.ROOM.T.w + G.ROOM_ORIG.x)) * 0.01
"""
match_indent = true

# G.ROOM.T.y: low-freq float and cursor-term use ease_shake_amt; jiggle term uses shake_amt
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "G.ROOM.T.y = G.ROOM_ORIG.y + (shake_amt)*(0.015*math.sin(0.952*G.TIMERS.REAL)  + 0.01*(G.ROOM.jiggle*shake_amt)*math.sin(21.913*G.TIMERS.REAL) + (G.ARGS.eased_cursor_pos.y - 0.5*(G.ROOM.T.h + G.ROOM_ORIG.y))*0.01)"
position = "at"
payload = """
G.ROOM.T.y = G.ROOM_ORIG.y
    + (0.015 * math.sin(0.952 * G.TIMERS.REAL)) * ease_shake_amt
    + (0.01 * (G.ROOM.jiggle * shake_amt) * math.sin(21.913 * G.TIMERS.REAL)) * shake_amt
    + (ease_shake_amt) * (G.ARGS.eased_cursor_pos.y - 0.5*(G.ROOM.T.h + G.ROOM_ORIG.y)) * 0.01
"""
match_indent = true
